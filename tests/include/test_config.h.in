//
// Created by denn nevera on 16/11/2020.
//

#pragma once

#include <vector>
#include <string>
#if DEHANCER_GPU_METAL
#include "tests/metal/paths_config.h"
#elif DEHANCER_GPU_CUDA
#include "tests/cuda/paths_config.h"
#endif

constexpr const char* IMAGES_DIR="@IMAGES_DIR@";
constexpr const char* DATA_DIR="@DATA_DIR@";
static const std::vector<std::string> IMAGE_FILES = {"lena0.jpg","lena1.jpg","lena2.png","lena3.jpg","lena4.jpg", "halation14.jpg", "4K.jpg"};//, "16K.jpg"};
static const std::vector<std::string> IMAGE_ONE_FILE = {"stress.tif"};
//static const std::vector<std::string> IMAGE_ONE_FILE = {"clear/08.png"};
static const std::vector<std::string> IMAGE_CLEAR_FILES = {"clear/01.png","clear/02.png","clear/03.png","clear/04.png","clear/05.png","clear/06.png","clear/07.png"};
static const std::vector<std::string> IMAGE_LARGE_FILES = {"16K.jpg", "16K.jpg", "16K.jpg", "16K.jpg", "16K.jpg", "16K.jpg", "16K.jpg", "16K.jpg"};
static const std::vector<std::string> VIDEO_FILES = {"video1.mp4", "video2.mov"};

namespace test {
    dehancer::TextureIO::Options::Type type = dehancer::TextureIO::Options::Type::jpeg;
    [[maybe_unused]] std::string ext = dehancer::TextureIO::extension_for(type);
    float compression = 0.0f;
}


#ifdef DEHANCER_GPU_CUDA

namespace dehancer::device {
    
    /**
      * MUST BE defined in certain plugin module
      * @return cuda lib path.
      */
    std::string get_lib_path () {
      return CUDA_KERNELS_LIBRARY;
    }
    
    extern std::size_t get_lib_source (std::string &source) {
      return 0;
    }
}

#elif DEHANCER_GPU_METAL

namespace dehancer::device {
    
    /**
     * MUST BE defined in certain plugin module
     * @return metal lib path.
     */
    std::string get_lib_path () {
      return METAL_KERNELS_LIBRARY;
    }
    
    extern std::size_t get_lib_source (std::string &source) {
      return 0;
    }
}

#endif